{"version":3,"sources":["Setup/Setup.module.css","Setup/Setup.js","Totp/Totp.js","App/App.js","App/SharedSecret.hook.js","App/TotpGenerator.hook.js","registerServiceWorker.js","index.js","Totp/Totp.module.css"],"names":["module","exports","Setup","onSave","useState","sharedSecret","setSharedSecret","passCode","setPassCode","saveButtonDisabled","setSaveButtonDisabled","onSaveClicked","useCallback","useEffect","length","className","styles","container","type","placeholder","value","onChange","e","target","maxLength","disabled","onClick","Totp","onUnlock","isLocked","generateCode","code","setCode","generateInterval","setInterval","clearInterval","locker","_","App","get","localStorage","getItem","reset","removeItem","store","encryptedSharedSecretKey","setItem","encrypt","password","AES","decrypt","enc","Utf8","stringify","generateTotp","SteamTotp","generateAuthCode","storedSharedSecretKey","setStoredSharedSecretKey","decryptedSharedSecretKey","setDecryptedSharedSecretKey","onShareSecretSave","sharedSecretData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c0762b47.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Setup_container__1Q5dv\"};","import styles from './Setup.module.css'\nimport {useState, useCallback, useEffect} from 'react'\n\nexport function Setup({onSave}) {\n    const [sharedSecret, setSharedSecret] = useState('')\n    const [passCode, setPassCode] = useState('')\n    const [saveButtonDisabled, setSaveButtonDisabled] = useState(true)\n\n    const onSaveClicked = useCallback(() => onSave({sharedSecret, passCode}), [onSave, sharedSecret, passCode])\n\n    useEffect(() => {\n        setSaveButtonDisabled(sharedSecret.length <= 0 || passCode.length < 4)\n    }, [sharedSecret, passCode])\n\n    return (\n        <div className={styles.container}>\n            <span>Shared secret</span>\n            <input type=\"text\"\n               placeholder=\"Type a shared secret\"\n               value={sharedSecret}\n               onChange={e => setSharedSecret(e.target.value)}\n            />\n\n            <span>Pass code (min 4 character)</span>\n            <input type=\"password\"\n               maxLength={4}\n               value={passCode}\n               placeholder=\"Type a passcode\"\n               onChange={e => setPassCode(e.target.value)}\n            />\n            <button disabled={saveButtonDisabled} onClick={onSaveClicked}>Save</button>\n        </div>\n    )\n}\n","import styles from './Totp.module.css'\nimport {useState, useEffect} from 'react'\n\nexport function Totp({onUnlock, isLocked, generateCode}) {\n    let [passCode, setPassCode] = useState('')\n    let [code, setCode] = useState('')\n\n    useEffect(() => {\n        let generateInterval = null\n\n        if (!isLocked) {\n            setCode(generateCode())\n\n            generateInterval = setInterval(() => {\n                setCode(generateCode())\n            }, 1000)\n        }\n\n        return () => generateInterval ? clearInterval(generateInterval) : null\n    }, [isLocked, generateCode])\n\n    return (\n        isLocked ?\n            <div className={styles.locker}>\n                <input type=\"password\"\n                       maxLength={4}\n                       placeholder=\"Type a passcode\"\n                       value={passCode}\n                       onChange={e => setPassCode(e.target.value)}\n                />\n                <button disabled={passCode.length < 4} onClick={_ => onUnlock(passCode)}>Unlock</button>\n            </div>\n            :\n            <div className={styles.code}>\n                <span>{code}</span>\n            </div>\n    )\n}\n","import {Setup} from '../Setup/Setup'\nimport {useCallback, useState} from 'react'\nimport {useSharedSecret} from \"./SharedSecret.hook\"\nimport {useGenerateTotp} from \"./TotpGenerator.hook\"\nimport {Totp} from '../Totp/Totp'\n\nfunction App() {\n    let sharedSecret = useSharedSecret()\n    let generateTotp = useGenerateTotp()\n\n    let [storedSharedSecretKey, setStoredSharedSecretKey] = useState(sharedSecret.get())\n    let [decryptedSharedSecretKey, setDecryptedSharedSecretKey] = useState(null)\n\n    const onUnlock = useCallback((password) => {\n        setDecryptedSharedSecretKey(sharedSecret.decrypt(storedSharedSecretKey, password))\n    }, [sharedSecret, storedSharedSecretKey])\n\n    const generateCode = useCallback(() => {\n        return generateTotp(decryptedSharedSecretKey)\n    }, [generateTotp, decryptedSharedSecretKey])\n\n    const onShareSecretSave = useCallback((sharedSecretData) => {\n        let encryptedSharedSecretKey = sharedSecret.encrypt(sharedSecretData.sharedSecret, sharedSecretData.passCode)\n\n        sharedSecret.store(encryptedSharedSecretKey)\n        setStoredSharedSecretKey(encryptedSharedSecretKey)\n        setDecryptedSharedSecretKey(sharedSecretData.sharedSecret)\n    }, [sharedSecret])\n\n    return !!storedSharedSecretKey ?\n        <Totp onUnlock={onUnlock} isLocked={!decryptedSharedSecretKey} generateCode={generateCode}/> :\n        <Setup onSave={onShareSecretSave}/>\n}\n\n\n\nexport default App;\n","import {AES, enc} from 'crypto-js'\n\nexport function useSharedSecret() {\n    // const padPassword = pwd => Array(8).fill(pwd).join``\n\n    return {\n        get: () => localStorage.getItem('sharedSecret'),\n        reset: () => localStorage.removeItem('sharedSecret'),\n        store: (encryptedSharedSecretKey) => localStorage.setItem('sharedSecret', encryptedSharedSecretKey),\n        encrypt: (sharedSecret, password) => AES.encrypt(sharedSecret, password),\n        decrypt: (encryptedSharedSecretKey, password) => enc.Utf8.stringify(AES.decrypt(encryptedSharedSecretKey, password))\n    }\n}\n","import SteamTotp from 'steam-totp'\n\nexport function useGenerateTotp() {\n    return function generateTotp(sharedSecret) {\n        return SteamTotp.generateAuthCode(sharedSecret)\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (!isLocalhost) {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            } else {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport './index.css'\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locker\":\"Totp_locker__1lW_w\",\"code\":\"Totp_code__2vzNz\"};"],"sourceRoot":""}